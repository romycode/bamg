// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package storagemocks

import (
	context "context"

	noter "github.com/romycode/bank-manager/internal"
	mock "github.com/stretchr/testify/mock"
)

// AccountRepository is an autogenerated mock type for the AccountRepository type
type AccountRepository struct {
	mock.Mock
}

// All provides a mock function with given fields: ctx
func (_m *AccountRepository) All(ctx context.Context) []noter.Account {
	ret := _m.Called(ctx)

	var r0 []noter.Account
	if rf, ok := ret.Get(0).(func(context.Context) []noter.Account); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]noter.Account)
		}
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *AccountRepository) Delete(ctx context.Context, id string) {
	_m.Called(ctx, id)
}

// GetByUserId provides a mock function with given fields: ctx, usrID
func (_m *AccountRepository) GetByUserId(ctx context.Context, usrID string) []noter.Account {
	ret := _m.Called(ctx, usrID)

	var r0 []noter.Account
	if rf, ok := ret.Get(0).(func(context.Context, string) []noter.Account); ok {
		r0 = rf(ctx, usrID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]noter.Account)
		}
	}

	return r0
}

// Save provides a mock function with given fields: ctx, a
func (_m *AccountRepository) Save(ctx context.Context, a noter.Account) {
	_m.Called(ctx, a)
}
